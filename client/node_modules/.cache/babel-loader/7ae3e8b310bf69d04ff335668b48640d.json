{"ast":null,"code":"import axios from \"axios\";\n\nclass APIHandler {\n  constructor() {\n    this.name = \"APIHandler\";\n    if (!process.env.REACT_APP_BACKEND_URL) throw new Error(\"A target backend URL must be specified in .env\");\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL,\n      // withCredentials: infos && infos.credentials ? true : false\n      withCredentials: true\n    }); // this.api.interceptors.response.use(function (response) {\n    //   // Any status code that lie within the range of 2xx cause this function to trigger\n    //   // Do something with response data\n    //   console.log(\"intercepted response\")\n    //   console.log(response)\n    //   return response;\n    // }, function (error) {\n    //   // Any status codes that falls outside the range of 2xx cause this function to trigger\n    //   // Do something with response error\n    //   console.log(error)\n    //   return Promise.reject(error);\n    // });\n  }\n\n  checkRoute(route, config) {\n    try {\n      if (!route) throw new Error(\"please provide the requested server route\");\n      if (config && typeof config !== \"object\") throw new Error(\"Config must be an object\");\n    } catch (err) {\n      return console.error(err);\n    }\n  }\n\n  post(route, payload, config) {\n    this.checkRoute(route, config);\n    if (payload && typeof payload !== \"object\") throw new Error(`${this.name} post() function expects payload argument to be of type Object`);\n    return this.api.post(route, payload, config);\n  }\n\n  get(route, query, config) {\n    this.checkRoute(route, config);\n    var queryString = \"\";\n\n    if (query) {\n      if (typeof query !== \"object\") throw new Error(`${this.name} get() function expects query argument to be of type Object`);\n      let count = 0;\n      let keyCount = Object.keys(query);\n\n      for (let key in query) {\n        if (!count) queryString += \"?\";\n        if (count && count < keyCount) queryString += \"&\";\n        queryString += `${key}=${query[key]}`;\n        count++;\n      }\n    }\n\n    return this.api.get(route + (queryString || \"\"), config);\n  }\n\n  patch(route, payload, config) {\n    this.checkRoute(route, config);\n    if (!payload || typeof payload !== \"object\") throw new Error(`${this.name} patch() function expects payload argument to be of type Object`);\n    return this.api.patch(route, payload, config);\n  }\n\n  replace(route, payload, config) {\n    this.checkRoute(route, config);\n    if (!payload || typeof payload !== \"object\") throw new Error(`${this.name} replace() function expects payload argument to be of type Object`);\n    return this.api.put(route, payload, config);\n  }\n\n  delete(route, id, config) {\n    this.checkRoute(route, config);\n    if (!id) throw new Error(`${this.name} delete() function expects the id of the ressource targeted for deletion`);\n    return this.api.delete(`${route}/${id}`);\n  }\n\n}\n\nexport default new APIHandler();","map":{"version":3,"sources":["/Users/wendy/Documents/IRONHACK/MODULE-3/Projet-3-HelpMate/help-mate-client/client/src/api/APIHandler.jsx"],"names":["axios","APIHandler","constructor","name","process","env","REACT_APP_BACKEND_URL","Error","api","create","baseURL","withCredentials","checkRoute","route","config","err","console","error","post","payload","get","query","queryString","count","keyCount","Object","keys","key","patch","replace","put","delete","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAY,YAAZ;AACA,QAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,qBAAjB,EACE,MAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACF,SAAKC,GAAL,GAAWR,KAAK,CAACS,MAAN,CAAa;AACtBC,MAAAA,OAAO,EAAEN,OAAO,CAACC,GAAR,CAAYC,qBADC;AAEtB;AACAK,MAAAA,eAAe,EAAE;AAHK,KAAb,CAAX,CAJY,CASZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxB,QAAI;AACF,UAAI,CAACD,KAAL,EAAY,MAAM,IAAIN,KAAJ,CAAU,2CAAV,CAAN;AACZ,UAAIO,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAAhC,EACE,MAAM,IAAIP,KAAJ,CAAU,0BAAV,CAAN;AACH,KAJD,CAIE,OAAOQ,GAAP,EAAY;AACZ,aAAOC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAP;AACD;AACF;;AAEDG,EAAAA,IAAI,CAACL,KAAD,EAAQM,OAAR,EAAiBL,MAAjB,EAAyB;AAC3B,SAAKF,UAAL,CAAgBC,KAAhB,EAAuBC,MAAvB;AACA,QAAIK,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAlC,EACE,MAAM,IAAIZ,KAAJ,CACH,GAAE,KAAKJ,IAAK,gEADT,CAAN;AAGF,WAAO,KAAKK,GAAL,CAASU,IAAT,CAAcL,KAAd,EAAqBM,OAArB,EAA8BL,MAA9B,CAAP;AACD;;AAEDM,EAAAA,GAAG,CAACP,KAAD,EAAQQ,KAAR,EAAeP,MAAf,EAAuB;AACxB,SAAKF,UAAL,CAAgBC,KAAhB,EAAuBC,MAAvB;AACA,QAAIQ,WAAW,GAAG,EAAlB;;AACA,QAAID,KAAJ,EAAW;AACT,UAAI,OAAOA,KAAP,KAAiB,QAArB,EACE,MAAM,IAAId,KAAJ,CACH,GAAE,KAAKJ,IAAK,6DADT,CAAN;AAGF,UAAIoB,KAAK,GAAG,CAAZ;AACA,UAAIC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAZ,CAAf;;AACA,WAAK,IAAIM,GAAT,IAAgBN,KAAhB,EAAuB;AACrB,YAAI,CAACE,KAAL,EAAYD,WAAW,IAAI,GAAf;AACZ,YAAIC,KAAK,IAAIA,KAAK,GAAGC,QAArB,EAA+BF,WAAW,IAAI,GAAf;AAC/BA,QAAAA,WAAW,IAAK,GAAEK,GAAI,IAAGN,KAAK,CAACM,GAAD,CAAM,EAApC;AACAJ,QAAAA,KAAK;AACN;AACF;;AAED,WAAO,KAAKf,GAAL,CAASY,GAAT,CAAaP,KAAK,IAAIS,WAAW,IAAI,EAAnB,CAAlB,EAA0CR,MAA1C,CAAP;AACD;;AAEDc,EAAAA,KAAK,CAACf,KAAD,EAAQM,OAAR,EAAiBL,MAAjB,EAAyB;AAC5B,SAAKF,UAAL,CAAgBC,KAAhB,EAAuBC,MAAvB;AACA,QAAI,CAACK,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EACE,MAAM,IAAIZ,KAAJ,CACH,GAAE,KAAKJ,IAAK,iEADT,CAAN;AAGF,WAAO,KAAKK,GAAL,CAASoB,KAAT,CAAef,KAAf,EAAsBM,OAAtB,EAA+BL,MAA/B,CAAP;AACD;;AAEDe,EAAAA,OAAO,CAAChB,KAAD,EAAQM,OAAR,EAAiBL,MAAjB,EAAyB;AAC9B,SAAKF,UAAL,CAAgBC,KAAhB,EAAuBC,MAAvB;AACA,QAAI,CAACK,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EACE,MAAM,IAAIZ,KAAJ,CACH,GAAE,KAAKJ,IAAK,mEADT,CAAN;AAGF,WAAO,KAAKK,GAAL,CAASsB,GAAT,CAAajB,KAAb,EAAoBM,OAApB,EAA6BL,MAA7B,CAAP;AACD;;AAEDiB,EAAAA,MAAM,CAAClB,KAAD,EAAQmB,EAAR,EAAYlB,MAAZ,EAAoB;AACxB,SAAKF,UAAL,CAAgBC,KAAhB,EAAuBC,MAAvB;AACA,QAAI,CAACkB,EAAL,EACE,MAAM,IAAIzB,KAAJ,CACH,GAAE,KAAKJ,IAAK,0EADT,CAAN;AAGF,WAAO,KAAKK,GAAL,CAASuB,MAAT,CAAiB,GAAElB,KAAM,IAAGmB,EAAG,EAA/B,CAAP;AACD;;AAzFc;;AA4FjB,eAAe,IAAI/B,UAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nclass APIHandler {\n  constructor() {\n    this.name = \"APIHandler\";\n    if (!process.env.REACT_APP_BACKEND_URL)\n      throw new Error(\"A target backend URL must be specified in .env\");\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BACKEND_URL,\n      // withCredentials: infos && infos.credentials ? true : false\n      withCredentials: true\n    });\n    // this.api.interceptors.response.use(function (response) {\n    //   // Any status code that lie within the range of 2xx cause this function to trigger\n    //   // Do something with response data\n    //   console.log(\"intercepted response\")\n    //   console.log(response)\n    //   return response;\n    // }, function (error) {\n    //   // Any status codes that falls outside the range of 2xx cause this function to trigger\n    //   // Do something with response error\n    //   console.log(error)\n    //   return Promise.reject(error);\n    // });\n  }\n\n  checkRoute(route, config) {\n    try {\n      if (!route) throw new Error(\"please provide the requested server route\");\n      if (config && typeof config !== \"object\")\n        throw new Error(\"Config must be an object\");\n    } catch (err) {\n      return console.error(err);\n    }\n  }\n\n  post(route, payload, config) {\n    this.checkRoute(route, config);\n    if (payload && typeof payload !== \"object\")\n      throw new Error(\n        `${this.name} post() function expects payload argument to be of type Object`\n      );\n    return this.api.post(route, payload, config);\n  }\n\n  get(route, query, config) {\n    this.checkRoute(route, config);\n    var queryString = \"\";\n    if (query) {\n      if (typeof query !== \"object\")\n        throw new Error(\n          `${this.name} get() function expects query argument to be of type Object`\n        );\n      let count = 0;\n      let keyCount = Object.keys(query);\n      for (let key in query) {\n        if (!count) queryString += \"?\";\n        if (count && count < keyCount) queryString += \"&\";\n        queryString += `${key}=${query[key]}`;\n        count++;\n      }\n    }\n\n    return this.api.get(route + (queryString || \"\"), config);\n  }\n\n  patch(route, payload, config) {\n    this.checkRoute(route, config);\n    if (!payload || typeof payload !== \"object\")\n      throw new Error(\n        `${this.name} patch() function expects payload argument to be of type Object`\n      );\n    return this.api.patch(route, payload, config);\n  }\n\n  replace(route, payload, config) {\n    this.checkRoute(route, config);\n    if (!payload || typeof payload !== \"object\")\n      throw new Error(\n        `${this.name} replace() function expects payload argument to be of type Object`\n      );\n    return this.api.put(route, payload, config);\n  }\n\n  delete(route, id, config) {\n    this.checkRoute(route, config);\n    if (!id)\n      throw new Error(\n        `${this.name} delete() function expects the id of the ressource targeted for deletion`\n      );\n    return this.api.delete(`${route}/${id}`);\n  }\n}\n\nexport default new APIHandler();"]},"metadata":{},"sourceType":"module"}