{"ast":null,"code":"var _jsxFileName = \"/Users/wendy/Documents/IRONHACK/MODULE-3/Projet-3-HelpMate/help-mate-client/client/src/views/AdsDisplayed.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport APIHandler from \"../../src/api/APIHandler\";\nimport PreviewAd from \"../components/ad/PreviewAd\";\nimport TabsAd from \"../components/ad/TabsAds\";\nimport Map from \"../components/map/Map\";\nimport { LoadScript } from \"@react-google-maps/api\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMapMarkedAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport '../styles/adsPreview.css';\nimport { withRouter } from \"react-router-dom\";\nexport default withRouter(function AdsDisplayed({\n  history,\n  location,\n  match,\n  adsSearched,\n  max\n}) {\n  const [ads, setAds] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [toggleMap, setToggleMap] = useState(false);\n  const [toggleFilters, setToggleFilters] = useState(false);\n  const [categorySelected, setCategorySelected] = useState('');\n  const [typeSelected, setTypeSelected] = useState('');\n  const [apiRes, setApiRes] = useState([]);\n  const [inputAddress, setInputAddress] = useState(\"Paris\");\n  const [latitude, setLatitude] = useState(48.8534);\n  const [longitude, setLongitude] = useState(2.3488);\n  const [maxDistance, setMaxDistance] = useState(10);\n\n  const changeMaxDistance = e => {\n    setMaxDistance(e.target.value);\n    console.log('max dist', e.target.value);\n  };\n\n  const handleinput = e => {\n    setInputAddress(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    console.log('add', inputAddress);\n    e.preventDefault();\n    const geocoder = new window.google.maps.Geocoder();\n    geocoder.geocode({\n      address: inputAddress\n    }, (results, status) => {\n      if (status == \"OK\") {\n        console.log(results, \"this is results\");\n        const lat = results[0].geometry.location.lat();\n        const lng = results[0].geometry.location.lng();\n        console.log('results', lat, lng);\n        setLatitude(lat);\n        setLongitude(lng);\n      } else {\n        alert(\"Geocode was not successful for the following reason: \" + status);\n      }\n    });\n  };\n\n  function getUserlocation() {\n    console.log('youhou je veux ta localisation');\n    var infoWindow;\n    infoWindow = new window.google.maps.InfoWindow();\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        var pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n        infoWindow.setPosition(pos);\n        infoWindow.setContent('Location found.');\n        console.log(\"voici ta localisation bitch\", position.coords.latitude, \",\", position.coords.longitude); // infoWindow.open(map);\n        // map.setCenter(pos);\n      }, function () {\n        window.handleLocationError(true); // map.getCenter()\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      window.handleLocationError(false); // map.getCenter()\n    }\n  }\n\n  function distance(lat1, lon1, lat2, lon2) {\n    console.log('lat voulue', lat1);\n    console.log('lat comparée', lat2);\n    console.log('lng voulue', lon1);\n    console.log('lng comparée', lon2);\n\n    if (lat1 == lat2 && lon1 == lon2) {\n      return 0;\n    } else {\n      var radlat1 = Math.PI * lat1 / 180;\n      var radlat2 = Math.PI * lat2 / 180;\n      var theta = lon1 - lon2;\n      var radtheta = Math.PI * theta / 180;\n      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n      if (dist > 1) {\n        dist = 1;\n      }\n\n      dist = Math.acos(dist);\n      dist = dist * 180 / Math.PI;\n      dist = dist * 60 * 1.1515;\n      dist = dist * 1.609344;\n      console.log('dist', dist);\n      return dist;\n    }\n  }\n\n  const displayMap = () => {\n    setToggleMap(!toggleMap);\n  };\n\n  function displayFilters() {\n    setToggleFilters(!toggleFilters);\n  }\n\n  useEffect(() => {\n    if (max) {\n      const adsFiltered = ads.filter((ad, i) => i < max);\n      setAds(adsFiltered);\n    }\n\n    const query = location.search.replace(\"?search=\", \"\");\n    APIHandler.get(`ads/search?q=${query}`).then(apiRes => {\n      if (max) {\n        const adsFiltered = apiRes.data.dbRes.filter((ad, i) => i < max);\n        setAds(adsFiltered);\n      } else {\n        setAds(apiRes.data.dbRes);\n        setApiRes(apiRes.data.dbRes);\n      }\n    }).catch(err => console.error(err));\n  }, [location]);\n  useEffect(() => {\n    console.log('setlatitude', latitude, 'setlongitude', longitude);\n    console.log('max dist', maxDistance);\n    const newArray = apiRes.filter((ad, i) => ad.adType.includes(typeSelected) && ad.category.includes(categorySelected) && distance(latitude, longitude, ad.location.coordinates[1], ad.location.coordinates[0]) <= maxDistance); // console.log('filter type',typeArray);\n\n    setAds(newArray);\n  }, [typeSelected, categorySelected, maxDistance, latitude, longitude]);\n  useEffect(() => {\n    if (adsSearched && adsSearched.length !== 0) {\n      setAds(adsSearched);\n    }\n\n    const locationsArray = ads.map((ad, i) => ad.location.coordinates);\n    setLocations(locationsArray);\n  }, [adsSearched, ads]);\n\n  const handleCategories = e => {\n    setCategorySelected(e.target.id);\n    console.log('categorychanged', categorySelected);\n  };\n\n  const handleType = e => {\n    setTypeSelected(e.target.value);\n    console.log('type changed', typeSelected);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(TabsAd, {\n    getUserlocation: getUserlocation,\n    maxDistance: maxDistance,\n    changeMaxDistance: changeMaxDistance,\n    handleinput: handleinput,\n    handleSubmit: handleSubmit,\n    setCategorySelected: handleCategories,\n    setTypeSelected: handleType,\n    mapActive: toggleMap,\n    filtersActive: toggleFilters,\n    toggleFilters: displayFilters,\n    toggle: displayMap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: toggleFilters ? \"withfilters\" : \"nofilter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(LoadScript, {\n    id: \"script-loader\",\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_APIKEY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, toggleMap && React.createElement(Map, {\n    locations: locations,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"ads-preview-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, Boolean(ads.length) ? ads.map((ad, i) => React.createElement(PreviewAd, {\n    data: ad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, \"Aucune annonce \\xE0 afficher...\"))));\n});","map":{"version":3,"sources":["/Users/wendy/Documents/IRONHACK/MODULE-3/Projet-3-HelpMate/help-mate-client/client/src/views/AdsDisplayed.jsx"],"names":["React","useEffect","useState","APIHandler","PreviewAd","TabsAd","Map","LoadScript","FontAwesomeIcon","faMapMarkedAlt","withRouter","AdsDisplayed","history","location","match","adsSearched","max","ads","setAds","locations","setLocations","toggleMap","setToggleMap","toggleFilters","setToggleFilters","categorySelected","setCategorySelected","typeSelected","setTypeSelected","apiRes","setApiRes","inputAddress","setInputAddress","latitude","setLatitude","longitude","setLongitude","maxDistance","setMaxDistance","changeMaxDistance","e","target","value","console","log","handleinput","handleSubmit","preventDefault","geocoder","window","google","maps","Geocoder","geocode","address","results","status","lat","geometry","lng","alert","getUserlocation","infoWindow","InfoWindow","navigator","geolocation","getCurrentPosition","position","pos","coords","setPosition","setContent","handleLocationError","distance","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","displayMap","displayFilters","adsFiltered","filter","ad","i","query","search","replace","get","then","data","dbRes","catch","err","error","newArray","adType","includes","category","coordinates","length","locationsArray","map","handleCategories","id","handleType","process","env","REACT_APP_GOOGLE_APIKEY","Boolean"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from \"react\";\nimport APIHandler from \"../../src/api/APIHandler\";\nimport PreviewAd from \"../components/ad/PreviewAd\";\nimport TabsAd from \"../components/ad/TabsAds\";\nimport Map from \"../components/map/Map\";\nimport { LoadScript } from \"@react-google-maps/api\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMapMarkedAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport '../styles/adsPreview.css'\nimport {withRouter} from \"react-router-dom\";\n\n\nexport default withRouter(function AdsDisplayed({ history, location, match, adsSearched, max }) {\n\n  const [ads, setAds] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [toggleMap, setToggleMap] = useState(false);\n  const [toggleFilters, setToggleFilters] = useState(false)\n  const [categorySelected, setCategorySelected] = useState('')\n  const [typeSelected, setTypeSelected]= useState('')\n  const [apiRes, setApiRes]= useState([])\n  const [inputAddress, setInputAddress] = useState(\"Paris\");\n  const [latitude, setLatitude] = useState(48.8534);\n  const [longitude, setLongitude] = useState(2.3488);\n  const [maxDistance, setMaxDistance] = useState(10);\n\n  const changeMaxDistance = e => {\n    setMaxDistance(e.target.value)\n    console.log('max dist',e.target.value)\n  }\n  const handleinput =e =>{\n    setInputAddress (e.target.value)\n  }\n\n  const handleSubmit =e=>{\n    console.log('add', inputAddress)\n    e.preventDefault();\n    const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({ address: inputAddress }, (results, status)=> {\n        if (status == \"OK\") {\n          console.log(results, \"this is results\");\n          const lat = results[0].geometry.location.lat();\n          const lng = results[0].geometry.location.lng();\n          console.log('results',lat, lng);\n          setLatitude(lat);\n          setLongitude(lng);\n        } else {\n          alert(\n            \"Geocode was not successful for the following reason: \" + status\n          );\n        }\n  })\n}\n  function getUserlocation (){\n    console.log('youhou je veux ta localisation')\n    var infoWindow;\n    infoWindow = new window.google.maps.InfoWindow;\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        var pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n        infoWindow.setPosition(pos);\n        infoWindow.setContent('Location found.');\n        console.log(\"voici ta localisation bitch\",position.coords.latitude,\",\", position.coords.longitude)\n        // infoWindow.open(map);\n        // map.setCenter(pos);\n      }, function() {\n        window.handleLocationError(true);\n        // map.getCenter()\n      });\n    } else {\n      // Browser doesn't support Geolocation\n      window.handleLocationError(false);\n      // map.getCenter()\n    }\n  }\n  function distance(lat1, lon1, lat2, lon2) {\n    console.log('lat voulue', lat1);\n    console.log('lat comparée', lat2);\n    console.log('lng voulue', lon1);\n    console.log('lng comparée', lon2);\n    if ((lat1 == lat2) && (lon1 == lon2)) {\n      return 0;\n    }\n    else {\n      var radlat1 = Math.PI * lat1/180;\n      var radlat2 = Math.PI * lat2/180;\n      var theta = lon1-lon2;\n      var radtheta = Math.PI * theta/180;\n      var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n      if (dist > 1) {\n        dist = 1;\n      }\n      dist = Math.acos(dist);\n      dist = dist * 180/Math.PI;\n      dist = dist * 60 * 1.1515;\n      dist = dist * 1.609344\n      console.log('dist',dist)\n      return dist;\n    }\n  }\n\n  const displayMap = ()=> {\n    setToggleMap(!toggleMap)\n  }\n  function displayFilters(){\n    setToggleFilters(!toggleFilters)\n  }\n  \n  useEffect(() => {\n    if (max) {\n      const adsFiltered = ads.filter((ad,i) => i < max )\n      setAds(adsFiltered)\n    }\n    \n    const query = location.search.replace(\"?search=\", \"\");\n    APIHandler.get(`ads/search?q=${query}`)\n    .then(apiRes => {\n\n      if (max) {\n        const adsFiltered = apiRes.data.dbRes.filter((ad,i) => i < max )\n        setAds(adsFiltered)\n      } else {\n        setAds(apiRes.data.dbRes)\n        setApiRes(apiRes.data.dbRes)\n      }\n    })\n    .catch(err => console.error(err))\n  }, [location])\n\n  useEffect(()=>{\n    console.log('setlatitude', latitude, 'setlongitude', longitude)\n    console.log('max dist', maxDistance)\n      const newArray =  apiRes.filter((ad, i)=>(ad.adType.includes(typeSelected) && ad.category.includes(categorySelected) && distance(latitude, longitude, ad.location.coordinates[1],ad.location.coordinates[0])<=maxDistance))\n      // console.log('filter type',typeArray);\n      setAds(newArray)\n  },[typeSelected, categorySelected, maxDistance, latitude, longitude])\n\n  useEffect(()=>{\n    if(adsSearched && adsSearched.length!==0) {\n      setAds(adsSearched)\n    }\n    \n    const locationsArray = ads.map((ad, i)=>(ad.location.coordinates))\n    setLocations(locationsArray)\n  }, [adsSearched, ads])\n \n \n  const handleCategories =  e => {\n    setCategorySelected(e.target.id);\n    console.log('categorychanged', categorySelected)\n}\nconst handleType = e => {\nsetTypeSelected(e.target.value);\nconsole.log('type changed', typeSelected)\n}\n  return (\n    <div>\n        <TabsAd getUserlocation={getUserlocation} maxDistance={maxDistance} changeMaxDistance= {changeMaxDistance} handleinput={handleinput} handleSubmit={handleSubmit} setCategorySelected={handleCategories} setTypeSelected={handleType} mapActive={toggleMap} filtersActive={toggleFilters} toggleFilters={displayFilters} toggle={displayMap}/>\n        <div className={toggleFilters?\"withfilters\": \"nofilter\"}>\n        <LoadScript\n        id=\"script-loader\"\n        googleMapsApiKey={process.env.REACT_APP_GOOGLE_APIKEY}\n        >\n        {toggleMap && <Map locations={locations} />}\n        </LoadScript>\n        \n        <div className=\"ads-preview-container\">\n        {Boolean(ads.length) ? (\n          ads.map((ad, i) => <PreviewAd data={ad} />)\n        ) : (\n          <p>Aucune annonce à afficher...</p>\n        )}\n        </div>\n\n        </div>\n    </div>\n  )\n})\n"]},"metadata":{},"sourceType":"module"}