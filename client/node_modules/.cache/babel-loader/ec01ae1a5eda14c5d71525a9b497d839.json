{"ast":null,"code":"var _jsxFileName = \"/Users/wendy/Documents/IRONHACK/MODULE-3/Projet-3-HelpMate/help-mate-client/client/src/auth/ProtectedRoute.jsx\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../auth/useAuth\";\n/* \n@mdn : A function's last parameter can be prefixed with \"...\"\nwhich will cause all remaining (user supplied) arguments to be placed within a \"standard\" javascript array. \nOnly the last parameter can be a \"rest parameter\".\n*/\n// line below : use of the rest parameter\n\nexport const ProtectedRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  const {\n    isLoggedIn,\n    isLoading\n  } = useAuth(); // return default template while performing async auth task\n\n  if (isLoading) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Loading...\");\n  return isLoggedIn ? // if logged in, return a regular Route component\n  // this Route gets any passed (...rested) props in a literal object\n  React.createElement(Route, Object.assign({}, rest, {\n    render: props => React.createElement(Component, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  })) : // if not logged in redirect to signin\n  React.createElement(Redirect, {\n    to: \"/signin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/wendy/Documents/IRONHACK/MODULE-3/Projet-3-HelpMate/help-mate-client/client/src/auth/ProtectedRoute.jsx"],"names":["React","Route","Redirect","useAuth","ProtectedRoute","component","Component","rest","isLoggedIn","isLoading","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA;;;;;AAKA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AACnE,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4BN,OAAO,EAAzC,CADmE,CAEnE;;AACA,MAAIM,SAAJ,EAAe,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACf,SAAOD,UAAU,GACf;AACA;AACA,sBAAC,KAAD,oBAAWD,IAAX;AAAiB,IAAA,MAAM,EAAEG,KAAK,IAAI,oBAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHe,GAKf;AACA,sBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF;AAQD,CAZM","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../auth/useAuth\";\n\n/* \n@mdn : A function's last parameter can be prefixed with \"...\"\nwhich will cause all remaining (user supplied) arguments to be placed within a \"standard\" javascript array. \nOnly the last parameter can be a \"rest parameter\".\n*/\n// line below : use of the rest parameter\nexport const ProtectedRoute = ({ component: Component, ...rest }) => {\n  const { isLoggedIn, isLoading } = useAuth();\n  // return default template while performing async auth task\n  if (isLoading) return <div>Loading...</div>;\n  return isLoggedIn ? (\n    // if logged in, return a regular Route component\n    // this Route gets any passed (...rested) props in a literal object\n    <Route {...rest} render={props => <Component {...props} />} />\n  ) : (\n    // if not logged in redirect to signin\n    <Redirect to=\"/signin\" />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}